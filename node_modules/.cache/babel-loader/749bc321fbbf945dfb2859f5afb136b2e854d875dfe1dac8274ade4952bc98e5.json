{"ast":null,"code":"\"use client\";\n\n// src/alert-dialog.tsx\nimport _objectSpread from \"C:/Dynamic Form Builder Application/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Dynamic Form Builder Application/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeAlertDialog\"],\n  _excluded2 = [\"__scopeAlertDialog\"],\n  _excluded3 = [\"__scopeAlertDialog\"],\n  _excluded4 = [\"__scopeAlertDialog\"],\n  _excluded5 = [\"__scopeAlertDialog\", \"children\"],\n  _excluded6 = [\"__scopeAlertDialog\"],\n  _excluded7 = [\"__scopeAlertDialog\"],\n  _excluded8 = [\"__scopeAlertDialog\"],\n  _excluded9 = [\"__scopeAlertDialog\"];\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { createDialogScope } from \"@radix-ui/react-dialog\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createSlottable } from \"@radix-ui/react-slot\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ROOT_NAME = \"AlertDialog\";\nvar [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [createDialogScope]);\nvar useDialogScope = createDialogScope();\nvar AlertDialog = props => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    alertDialogProps = _objectWithoutProperties(props, _excluded);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Root, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), alertDialogProps), {}, {\n    modal: true\n  }));\n};\nAlertDialog.displayName = ROOT_NAME;\nvar TRIGGER_NAME = \"AlertDialogTrigger\";\nvar AlertDialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    triggerProps = _objectWithoutProperties(props, _excluded2);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Trigger, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), triggerProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"AlertDialogPortal\";\nvar AlertDialogPortal = props => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    portalProps = _objectWithoutProperties(props, _excluded3);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Portal, _objectSpread(_objectSpread({}, dialogScope), portalProps));\n};\nAlertDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"AlertDialogOverlay\";\nvar AlertDialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    overlayProps = _objectWithoutProperties(props, _excluded4);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Overlay, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), overlayProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogOverlay.displayName = OVERLAY_NAME;\nvar CONTENT_NAME = \"AlertDialogContent\";\nvar [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME);\nvar Slottable = createSlottable(\"AlertDialogContent\");\nvar AlertDialogContent = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog,\n      children\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded5);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const cancelRef = React.useRef(null);\n  return /* @__PURE__ */jsx(DialogPrimitive.WarningProvider, {\n    contentName: CONTENT_NAME,\n    titleName: TITLE_NAME,\n    docsSlug: \"alert-dialog\",\n    children: /* @__PURE__ */jsx(AlertDialogContentProvider, {\n      scope: __scopeAlertDialog,\n      cancelRef,\n      children: /* @__PURE__ */jsxs(DialogPrimitive.Content, _objectSpread(_objectSpread(_objectSpread({\n        role: \"alertdialog\"\n      }, dialogScope), contentProps), {}, {\n        ref: composedRefs,\n        onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, event => {\n          var _cancelRef$current;\n          event.preventDefault();\n          (_cancelRef$current = cancelRef.current) === null || _cancelRef$current === void 0 || _cancelRef$current.focus({\n            preventScroll: true\n          });\n        }),\n        onPointerDownOutside: event => event.preventDefault(),\n        onInteractOutside: event => event.preventDefault(),\n        children: [/* @__PURE__ */jsx(Slottable, {\n          children\n        }), /* @__PURE__ */jsx(DescriptionWarning, {\n          contentRef\n        })]\n      }))\n    })\n  });\n});\nAlertDialogContent.displayName = CONTENT_NAME;\nvar TITLE_NAME = \"AlertDialogTitle\";\nvar AlertDialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    titleProps = _objectWithoutProperties(props, _excluded6);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Title, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), titleProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"AlertDialogDescription\";\nvar AlertDialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    descriptionProps = _objectWithoutProperties(props, _excluded7);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Description, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), descriptionProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\nvar ACTION_NAME = \"AlertDialogAction\";\nvar AlertDialogAction = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    actionProps = _objectWithoutProperties(props, _excluded8);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), actionProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogAction.displayName = ACTION_NAME;\nvar CANCEL_NAME = \"AlertDialogCancel\";\nvar AlertDialogCancel = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    cancelProps = _objectWithoutProperties(props, _excluded9);\n  const {\n    cancelRef\n  } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const ref = useComposedRefs(forwardedRef, cancelRef);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), cancelProps), {}, {\n    ref\n  }));\n});\nAlertDialogCancel.displayName = CANCEL_NAME;\nvar DescriptionWarning = _ref => {\n  let {\n    contentRef\n  } = _ref;\n  const MESSAGE = \"`\".concat(CONTENT_NAME, \"` requires a description for the component to be accessible for screen reader users.\\n\\nYou can add a description to the `\").concat(CONTENT_NAME, \"` by passing a `\").concat(DESCRIPTION_NAME, \"` component as a child, which also benefits sighted users by adding visible context to the dialog.\\n\\nAlternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `\").concat(CONTENT_NAME, \"`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.\\n\\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog\");\n  React.useEffect(() => {\n    var _contentRef$current;\n    const hasDescription = document.getElementById((_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.getAttribute(\"aria-describedby\"));\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n  return null;\n};\nvar Root2 = AlertDialog;\nvar Trigger2 = AlertDialogTrigger;\nvar Portal2 = AlertDialogPortal;\nvar Overlay2 = AlertDialogOverlay;\nvar Content2 = AlertDialogContent;\nvar Action = AlertDialogAction;\nvar Cancel = AlertDialogCancel;\nvar Title2 = AlertDialogTitle;\nvar Description2 = AlertDialogDescription;\nexport { Action, AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogOverlay, AlertDialogPortal, AlertDialogTitle, AlertDialogTrigger, Cancel, Content2 as Content, Description2 as Description, Overlay2 as Overlay, Portal2 as Portal, Root2 as Root, Title2 as Title, Trigger2 as Trigger, createAlertDialogScope };","map":{"version":3,"names":["React","createContextScope","useComposedRefs","DialogPrimitive","createDialogScope","composeEventHandlers","createSlottable","jsx","jsxs","ROOT_NAME","createAlertDialogContext","createAlertDialogScope","useDialogScope","AlertDialog","props","__scopeAlertDialog","alertDialogProps","_objectWithoutProperties","_excluded","dialogScope","Root","_objectSpread","modal","displayName","TRIGGER_NAME","AlertDialogTrigger","forwardRef","forwardedRef","triggerProps","_excluded2","Trigger","ref","PORTAL_NAME","AlertDialogPortal","portalProps","_excluded3","Portal","OVERLAY_NAME","AlertDialogOverlay","overlayProps","_excluded4","Overlay","CONTENT_NAME","AlertDialogContentProvider","useAlertDialogContentContext","Slottable","AlertDialogContent","children","contentProps","_excluded5","contentRef","useRef","composedRefs","cancelRef","WarningProvider","contentName","titleName","TITLE_NAME","docsSlug","scope","Content","role","onOpenAutoFocus","event","_cancelRef$current","preventDefault","current","focus","preventScroll","onPointerDownOutside","onInteractOutside","DescriptionWarning","AlertDialogTitle","titleProps","_excluded6","Title","DESCRIPTION_NAME","AlertDialogDescription","descriptionProps","_excluded7","Description","ACTION_NAME","AlertDialogAction","actionProps","_excluded8","Close","CANCEL_NAME","AlertDialogCancel","cancelProps","_excluded9","_ref","MESSAGE","concat","useEffect","_contentRef$current","hasDescription","document","getElementById","getAttribute","console","warn","Root2","Trigger2","Portal2","Overlay2","Content2","Action","Cancel","Title2","Description2"],"sources":["C:\\Dynamic Form Builder Application\\node_modules\\@radix-ui\\react-alert-dialog\\src\\alert-dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { createDialogScope } from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createSlottable } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\ntype ScopedProps<P> = P & { __scopeAlertDialog?: Scope };\nconst [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [\n  createDialogScope,\n]);\nconst useDialogScope = createDialogScope();\n\ntype DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\ninterface AlertDialogProps extends Omit<DialogProps, 'modal'> {}\n\nconst AlertDialog: React.FC<AlertDialogProps> = (props: ScopedProps<AlertDialogProps>) => {\n  const { __scopeAlertDialog, ...alertDialogProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Root {...dialogScope} {...alertDialogProps} modal={true} />;\n};\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTrigger\n * -----------------------------------------------------------------------------------------------*/\nconst TRIGGER_NAME = 'AlertDialogTrigger';\n\ntype AlertDialogTriggerElement = React.ComponentRef<typeof DialogPrimitive.Trigger>;\ntype DialogTriggerProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>;\ninterface AlertDialogTriggerProps extends DialogTriggerProps {}\n\nconst AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(\n  (props: ScopedProps<AlertDialogTriggerProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...triggerProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Trigger {...dialogScope} {...triggerProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'AlertDialogPortal';\n\ntype DialogPortalProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>;\ninterface AlertDialogPortalProps extends DialogPortalProps {}\n\nconst AlertDialogPortal: React.FC<AlertDialogPortalProps> = (\n  props: ScopedProps<AlertDialogPortalProps>\n) => {\n  const { __scopeAlertDialog, ...portalProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Portal {...dialogScope} {...portalProps} />;\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'AlertDialogOverlay';\n\ntype AlertDialogOverlayElement = React.ComponentRef<typeof DialogPrimitive.Overlay>;\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>;\ninterface AlertDialogOverlayProps extends DialogOverlayProps {}\n\nconst AlertDialogOverlay = React.forwardRef<AlertDialogOverlayElement, AlertDialogOverlayProps>(\n  (props: ScopedProps<AlertDialogOverlayProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...overlayProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Overlay {...dialogScope} {...overlayProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<AlertDialogCancelElement | null>;\n};\n\nconst [AlertDialogContentProvider, useAlertDialogContentContext] =\n  createAlertDialogContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentElement = React.ComponentRef<typeof DialogPrimitive.Content>;\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\ninterface AlertDialogContentProps\n  extends Omit<DialogContentProps, 'onPointerDownOutside' | 'onInteractOutside'> {}\n\nconst Slottable = createSlottable('AlertDialogContent');\n\nconst AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(\n  (props: ScopedProps<AlertDialogContentProps>, forwardedRef) => {\n    const { __scopeAlertDialog, children, ...contentProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const contentRef = React.useRef<AlertDialogContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const cancelRef = React.useRef<AlertDialogCancelElement | null>(null);\n\n    return (\n      <DialogPrimitive.WarningProvider\n        contentName={CONTENT_NAME}\n        titleName={TITLE_NAME}\n        docsSlug=\"alert-dialog\"\n      >\n        <AlertDialogContentProvider scope={__scopeAlertDialog} cancelRef={cancelRef}>\n          <DialogPrimitive.Content\n            role=\"alertdialog\"\n            {...dialogScope}\n            {...contentProps}\n            ref={composedRefs}\n            onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n              event.preventDefault();\n              cancelRef.current?.focus({ preventScroll: true });\n            })}\n            onPointerDownOutside={(event) => event.preventDefault()}\n            onInteractOutside={(event) => event.preventDefault()}\n          >\n            {/**\n             * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n             * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n             * This is because we want the accessibility checks to run only once the content is actually\n             * open and that behaviour is already encapsulated in `DialogContent`.\n             */}\n            <Slottable>{children}</Slottable>\n            {process.env.NODE_ENV === 'development' && (\n              <DescriptionWarning contentRef={contentRef} />\n            )}\n          </DialogPrimitive.Content>\n        </AlertDialogContentProvider>\n      </DialogPrimitive.WarningProvider>\n    );\n  }\n);\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'AlertDialogTitle';\n\ntype AlertDialogTitleElement = React.ComponentRef<typeof DialogPrimitive.Title>;\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\ninterface AlertDialogTitleProps extends DialogTitleProps {}\n\nconst AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(\n  (props: ScopedProps<AlertDialogTitleProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...titleProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Title {...dialogScope} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\n\ntype AlertDialogDescriptionElement = React.ComponentRef<typeof DialogPrimitive.Description>;\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\ninterface AlertDialogDescriptionProps extends DialogDescriptionProps {}\n\nconst AlertDialogDescription = React.forwardRef<\n  AlertDialogDescriptionElement,\n  AlertDialogDescriptionProps\n>((props: ScopedProps<AlertDialogDescriptionProps>, forwardedRef) => {\n  const { __scopeAlertDialog, ...descriptionProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Description {...dialogScope} {...descriptionProps} ref={forwardedRef} />;\n});\n\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'AlertDialogAction';\n\ntype AlertDialogActionElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ntype DialogCloseProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogActionProps extends DialogCloseProps {}\n\nconst AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(\n  (props: ScopedProps<AlertDialogActionProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...actionProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Close {...dialogScope} {...actionProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogCancelProps extends DialogCloseProps {}\n\nconst AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(\n  (props: ScopedProps<AlertDialogCancelProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...cancelProps } = props;\n    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const ref = useComposedRefs(forwardedRef, cancelRef);\n    return <DialogPrimitive.Close {...dialogScope} {...cancelProps} ref={ref} />;\n  }\n);\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<AlertDialogContentElement | null>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Portal = AlertDialogPortal;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}