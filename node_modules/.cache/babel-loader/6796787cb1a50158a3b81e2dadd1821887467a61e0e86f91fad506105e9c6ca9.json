{"ast":null,"code":"import _objectSpread from\"C:/Dynamic Form Builder Application/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const FormContext=/*#__PURE__*/createContext(undefined);export const useFormContext=()=>{const context=useContext(FormContext);if(!context){throw new Error('useFormContext must be used within a FormProvider');}return context;};export const FormProvider=_ref=>{let{children}=_ref;const[currentForm,setCurrentForm]=useState(null);const[formData,setFormData]=useState({});const updateField=(fieldId,value)=>{setFormData(prev=>_objectSpread(_objectSpread({},prev),{},{[fieldId]:value}));};return/*#__PURE__*/_jsx(FormContext.Provider,{value:{currentForm,setCurrentForm,formData,setFormData,updateField},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","FormContext","undefined","useFormContext","context","Error","FormProvider","_ref","children","currentForm","setCurrentForm","formData","setFormData","updateField","fieldId","value","prev","_objectSpread","Provider"],"sources":["C:/Dynamic Form Builder Application/src/contexts/FormContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { FormSchema, FormField, FormData } from '../types/form.ts';\n\ninterface FormContextType {\n  currentForm: FormSchema | null;\n  setCurrentForm: (form: FormSchema | null) => void;\n  formData: FormData;\n  setFormData: (data: FormData) => void;\n  updateField: (fieldId: string, value: any) => void;\n}\n\nconst FormContext = createContext<FormContextType | undefined>(undefined);\n\nexport const useFormContext = () => {\n  const context = useContext(FormContext);\n  if (!context) {\n    throw new Error('useFormContext must be used within a FormProvider');\n  }\n  return context;\n};\n\ninterface FormProviderProps {\n  children: ReactNode;\n}\n\nexport const FormProvider: React.FC<FormProviderProps> = ({ children }) => {\n  const [currentForm, setCurrentForm] = useState<FormSchema | null>(null);\n  const [formData, setFormData] = useState<FormData>({});\n\n  const updateField = (fieldId: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [fieldId]: value\n    }));\n  };\n\n  return (\n    <FormContext.Provider\n      value={{\n        currentForm,\n        setCurrentForm,\n        formData,\n        setFormData,\n        updateField\n      }}\n    >\n      {children}\n    </FormContext.Provider>\n  );\n};"],"mappings":"wHAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAW9E,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAA8BM,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAClC,KAAM,CAAAC,OAAO,CAAGP,UAAU,CAACI,WAAW,CAAC,CACvC,GAAI,CAACG,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,mDAAmD,CAAC,CACtE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAMD,MAAO,MAAM,CAAAE,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAoB,IAAI,CAAC,CACvE,KAAM,CAACa,QAAQ,CAAEC,WAAW,CAAC,CAAGd,QAAQ,CAAW,CAAC,CAAC,CAAC,CAEtD,KAAM,CAAAe,WAAW,CAAGA,CAACC,OAAe,CAAEC,KAAU,GAAK,CACnDH,WAAW,CAACI,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACP,CAACF,OAAO,EAAGC,KAAK,EAChB,CAAC,CACL,CAAC,CAED,mBACEf,IAAA,CAACC,WAAW,CAACiB,QAAQ,EACnBH,KAAK,CAAE,CACLN,WAAW,CACXC,cAAc,CACdC,QAAQ,CACRC,WAAW,CACXC,WACF,CAAE,CAAAL,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}