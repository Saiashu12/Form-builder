{"ast":null,"code":"const FORMS_STORAGE_KEY = 'dynamicFormBuilder_forms';\nexport const saveForm = form => {\n  try {\n    const existingForms = getSavedForms();\n    const updatedForms = [...existingForms.filter(f => f.id !== form.id), form];\n    localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(updatedForms));\n  } catch (error) {\n    console.error('Error saving form:', error);\n  }\n};\nexport const getSavedForms = () => {\n  try {\n    const formsJson = localStorage.getItem(FORMS_STORAGE_KEY);\n    return formsJson ? JSON.parse(formsJson) : [];\n  } catch (error) {\n    console.error('Error loading forms:', error);\n    return [];\n  }\n};\nexport const getFormById = id => {\n  const forms = getSavedForms();\n  return forms.find(form => form.id === id) || null;\n};\nexport const deleteForm = id => {\n  try {\n    const forms = getSavedForms();\n    const updatedForms = forms.filter(form => form.id !== id);\n    localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(updatedForms));\n  } catch (error) {\n    console.error('Error deleting form:', error);\n  }\n};","map":{"version":3,"names":["FORMS_STORAGE_KEY","saveForm","form","existingForms","getSavedForms","updatedForms","filter","f","id","localStorage","setItem","JSON","stringify","error","console","formsJson","getItem","parse","getFormById","forms","find","deleteForm"],"sources":["C:/Dynamic Form Builder Application/src/utils/localStorage.ts"],"sourcesContent":["import { FormSchema } from '../types/form.ts';\n\nconst FORMS_STORAGE_KEY = 'dynamicFormBuilder_forms';\n\nexport const saveForm = (form: FormSchema): void => {\n  try {\n    const existingForms = getSavedForms();\n    const updatedForms = [...existingForms.filter(f => f.id !== form.id), form];\n    localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(updatedForms));\n  } catch (error) {\n    console.error('Error saving form:', error);\n  }\n};\n\nexport const getSavedForms = (): FormSchema[] => {\n  try {\n    const formsJson = localStorage.getItem(FORMS_STORAGE_KEY);\n    return formsJson ? JSON.parse(formsJson) : [];\n  } catch (error) {\n    console.error('Error loading forms:', error);\n    return [];\n  }\n};\n\nexport const getFormById = (id: string): FormSchema | null => {\n  const forms = getSavedForms();\n  return forms.find(form => form.id === id) || null;\n};\n\nexport const deleteForm = (id: string): void => {\n  try {\n    const forms = getSavedForms();\n    const updatedForms = forms.filter(form => form.id !== id);\n    localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(updatedForms));\n  } catch (error) {\n    console.error('Error deleting form:', error);\n  }\n};"],"mappings":"AAEA,MAAMA,iBAAiB,GAAG,0BAA0B;AAEpD,OAAO,MAAMC,QAAQ,GAAIC,IAAgB,IAAW;EAClD,IAAI;IACF,MAAMC,aAAa,GAAGC,aAAa,CAAC,CAAC;IACrC,MAAMC,YAAY,GAAG,CAAC,GAAGF,aAAa,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,IAAI,CAACM,EAAE,CAAC,EAAEN,IAAI,CAAC;IAC3EO,YAAY,CAACC,OAAO,CAACV,iBAAiB,EAAEW,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMT,aAAa,GAAGA,CAAA,KAAoB;EAC/C,IAAI;IACF,MAAMW,SAAS,GAAGN,YAAY,CAACO,OAAO,CAAChB,iBAAiB,CAAC;IACzD,OAAOe,SAAS,GAAGJ,IAAI,CAACM,KAAK,CAACF,SAAS,CAAC,GAAG,EAAE;EAC/C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMK,WAAW,GAAIV,EAAU,IAAwB;EAC5D,MAAMW,KAAK,GAAGf,aAAa,CAAC,CAAC;EAC7B,OAAOe,KAAK,CAACC,IAAI,CAAClB,IAAI,IAAIA,IAAI,CAACM,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;AACnD,CAAC;AAED,OAAO,MAAMa,UAAU,GAAIb,EAAU,IAAW;EAC9C,IAAI;IACF,MAAMW,KAAK,GAAGf,aAAa,CAAC,CAAC;IAC7B,MAAMC,YAAY,GAAGc,KAAK,CAACb,MAAM,CAACJ,IAAI,IAAIA,IAAI,CAACM,EAAE,KAAKA,EAAE,CAAC;IACzDC,YAAY,CAACC,OAAO,CAACV,iBAAiB,EAAEW,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}