{"ast":null,"code":"\"use client\";\n\n// src/alert-dialog.tsx\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { createDialogScope } from \"@radix-ui/react-dialog\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createSlottable } from \"@radix-ui/react-slot\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ROOT_NAME = \"AlertDialog\";\nvar [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [createDialogScope]);\nvar useDialogScope = createDialogScope();\nvar AlertDialog = props => {\n  const {\n    __scopeAlertDialog,\n    ...alertDialogProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Root, {\n    ...dialogScope,\n    ...alertDialogProps,\n    modal: true\n  });\n};\nAlertDialog.displayName = ROOT_NAME;\nvar TRIGGER_NAME = \"AlertDialogTrigger\";\nvar AlertDialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...triggerProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Trigger, {\n    ...dialogScope,\n    ...triggerProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"AlertDialogPortal\";\nvar AlertDialogPortal = props => {\n  const {\n    __scopeAlertDialog,\n    ...portalProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Portal, {\n    ...dialogScope,\n    ...portalProps\n  });\n};\nAlertDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"AlertDialogOverlay\";\nvar AlertDialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...overlayProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Overlay, {\n    ...dialogScope,\n    ...overlayProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogOverlay.displayName = OVERLAY_NAME;\nvar CONTENT_NAME = \"AlertDialogContent\";\nvar [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME);\nvar Slottable = createSlottable(\"AlertDialogContent\");\nvar AlertDialogContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    children,\n    ...contentProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const cancelRef = React.useRef(null);\n  return /* @__PURE__ */jsx(DialogPrimitive.WarningProvider, {\n    contentName: CONTENT_NAME,\n    titleName: TITLE_NAME,\n    docsSlug: \"alert-dialog\",\n    children: /* @__PURE__ */jsx(AlertDialogContentProvider, {\n      scope: __scopeAlertDialog,\n      cancelRef,\n      children: /* @__PURE__ */jsxs(DialogPrimitive.Content, {\n        role: \"alertdialog\",\n        ...dialogScope,\n        ...contentProps,\n        ref: composedRefs,\n        onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, event => {\n          event.preventDefault();\n          cancelRef.current?.focus({\n            preventScroll: true\n          });\n        }),\n        onPointerDownOutside: event => event.preventDefault(),\n        onInteractOutside: event => event.preventDefault(),\n        children: [/* @__PURE__ */jsx(Slottable, {\n          children\n        }), /* @__PURE__ */jsx(DescriptionWarning, {\n          contentRef\n        })]\n      })\n    })\n  });\n});\nAlertDialogContent.displayName = CONTENT_NAME;\nvar TITLE_NAME = \"AlertDialogTitle\";\nvar AlertDialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...titleProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Title, {\n    ...dialogScope,\n    ...titleProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"AlertDialogDescription\";\nvar AlertDialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...descriptionProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Description, {\n    ...dialogScope,\n    ...descriptionProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\nvar ACTION_NAME = \"AlertDialogAction\";\nvar AlertDialogAction = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...actionProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, {\n    ...dialogScope,\n    ...actionProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogAction.displayName = ACTION_NAME;\nvar CANCEL_NAME = \"AlertDialogCancel\";\nvar AlertDialogCancel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...cancelProps\n  } = props;\n  const {\n    cancelRef\n  } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const ref = useComposedRefs(forwardedRef, cancelRef);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, {\n    ...dialogScope,\n    ...cancelProps,\n    ref\n  });\n});\nAlertDialogCancel.displayName = CANCEL_NAME;\nvar DescriptionWarning = ({\n  contentRef\n}) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(contentRef.current?.getAttribute(\"aria-describedby\"));\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n  return null;\n};\nvar Root2 = AlertDialog;\nvar Trigger2 = AlertDialogTrigger;\nvar Portal2 = AlertDialogPortal;\nvar Overlay2 = AlertDialogOverlay;\nvar Content2 = AlertDialogContent;\nvar Action = AlertDialogAction;\nvar Cancel = AlertDialogCancel;\nvar Title2 = AlertDialogTitle;\nvar Description2 = AlertDialogDescription;\nexport { Action, AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogOverlay, AlertDialogPortal, AlertDialogTitle, AlertDialogTrigger, Cancel, Content2 as Content, Description2 as Description, Overlay2 as Overlay, Portal2 as Portal, Root2 as Root, Title2 as Title, Trigger2 as Trigger, createAlertDialogScope };","map":{"version":3,"names":["React","createContextScope","useComposedRefs","DialogPrimitive","createDialogScope","composeEventHandlers","createSlottable","jsx","jsxs","ROOT_NAME","createAlertDialogContext","createAlertDialogScope","useDialogScope","AlertDialog","props","__scopeAlertDialog","alertDialogProps","dialogScope","Root","modal","displayName","TRIGGER_NAME","AlertDialogTrigger","forwardRef","forwardedRef","triggerProps","Trigger","ref","PORTAL_NAME","AlertDialogPortal","portalProps","Portal","OVERLAY_NAME","AlertDialogOverlay","overlayProps","Overlay","CONTENT_NAME","AlertDialogContentProvider","useAlertDialogContentContext","Slottable","AlertDialogContent","children","contentProps","contentRef","useRef","composedRefs","cancelRef","WarningProvider","contentName","titleName","TITLE_NAME","docsSlug","scope","Content","role","onOpenAutoFocus","event","preventDefault","current","focus","preventScroll","onPointerDownOutside","onInteractOutside","DescriptionWarning","AlertDialogTitle","titleProps","Title","DESCRIPTION_NAME","AlertDialogDescription","descriptionProps","Description","ACTION_NAME","AlertDialogAction","actionProps","Close","CANCEL_NAME","AlertDialogCancel","cancelProps","MESSAGE","useEffect","hasDescription","document","getElementById","getAttribute","console","warn","Root2","Trigger2","Portal2","Overlay2","Content2","Action","Cancel","Title2","Description2"],"sources":["C:\\Dynamic Form Builder Application\\node_modules\\@radix-ui\\react-alert-dialog\\src\\alert-dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { createDialogScope } from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createSlottable } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\ntype ScopedProps<P> = P & { __scopeAlertDialog?: Scope };\nconst [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [\n  createDialogScope,\n]);\nconst useDialogScope = createDialogScope();\n\ntype DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\ninterface AlertDialogProps extends Omit<DialogProps, 'modal'> {}\n\nconst AlertDialog: React.FC<AlertDialogProps> = (props: ScopedProps<AlertDialogProps>) => {\n  const { __scopeAlertDialog, ...alertDialogProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Root {...dialogScope} {...alertDialogProps} modal={true} />;\n};\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTrigger\n * -----------------------------------------------------------------------------------------------*/\nconst TRIGGER_NAME = 'AlertDialogTrigger';\n\ntype AlertDialogTriggerElement = React.ComponentRef<typeof DialogPrimitive.Trigger>;\ntype DialogTriggerProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>;\ninterface AlertDialogTriggerProps extends DialogTriggerProps {}\n\nconst AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(\n  (props: ScopedProps<AlertDialogTriggerProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...triggerProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Trigger {...dialogScope} {...triggerProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'AlertDialogPortal';\n\ntype DialogPortalProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>;\ninterface AlertDialogPortalProps extends DialogPortalProps {}\n\nconst AlertDialogPortal: React.FC<AlertDialogPortalProps> = (\n  props: ScopedProps<AlertDialogPortalProps>\n) => {\n  const { __scopeAlertDialog, ...portalProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Portal {...dialogScope} {...portalProps} />;\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'AlertDialogOverlay';\n\ntype AlertDialogOverlayElement = React.ComponentRef<typeof DialogPrimitive.Overlay>;\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>;\ninterface AlertDialogOverlayProps extends DialogOverlayProps {}\n\nconst AlertDialogOverlay = React.forwardRef<AlertDialogOverlayElement, AlertDialogOverlayProps>(\n  (props: ScopedProps<AlertDialogOverlayProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...overlayProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Overlay {...dialogScope} {...overlayProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<AlertDialogCancelElement | null>;\n};\n\nconst [AlertDialogContentProvider, useAlertDialogContentContext] =\n  createAlertDialogContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentElement = React.ComponentRef<typeof DialogPrimitive.Content>;\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\ninterface AlertDialogContentProps\n  extends Omit<DialogContentProps, 'onPointerDownOutside' | 'onInteractOutside'> {}\n\nconst Slottable = createSlottable('AlertDialogContent');\n\nconst AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(\n  (props: ScopedProps<AlertDialogContentProps>, forwardedRef) => {\n    const { __scopeAlertDialog, children, ...contentProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const contentRef = React.useRef<AlertDialogContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const cancelRef = React.useRef<AlertDialogCancelElement | null>(null);\n\n    return (\n      <DialogPrimitive.WarningProvider\n        contentName={CONTENT_NAME}\n        titleName={TITLE_NAME}\n        docsSlug=\"alert-dialog\"\n      >\n        <AlertDialogContentProvider scope={__scopeAlertDialog} cancelRef={cancelRef}>\n          <DialogPrimitive.Content\n            role=\"alertdialog\"\n            {...dialogScope}\n            {...contentProps}\n            ref={composedRefs}\n            onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n              event.preventDefault();\n              cancelRef.current?.focus({ preventScroll: true });\n            })}\n            onPointerDownOutside={(event) => event.preventDefault()}\n            onInteractOutside={(event) => event.preventDefault()}\n          >\n            {/**\n             * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n             * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n             * This is because we want the accessibility checks to run only once the content is actually\n             * open and that behaviour is already encapsulated in `DialogContent`.\n             */}\n            <Slottable>{children}</Slottable>\n            {process.env.NODE_ENV === 'development' && (\n              <DescriptionWarning contentRef={contentRef} />\n            )}\n          </DialogPrimitive.Content>\n        </AlertDialogContentProvider>\n      </DialogPrimitive.WarningProvider>\n    );\n  }\n);\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'AlertDialogTitle';\n\ntype AlertDialogTitleElement = React.ComponentRef<typeof DialogPrimitive.Title>;\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\ninterface AlertDialogTitleProps extends DialogTitleProps {}\n\nconst AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(\n  (props: ScopedProps<AlertDialogTitleProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...titleProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Title {...dialogScope} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\n\ntype AlertDialogDescriptionElement = React.ComponentRef<typeof DialogPrimitive.Description>;\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\ninterface AlertDialogDescriptionProps extends DialogDescriptionProps {}\n\nconst AlertDialogDescription = React.forwardRef<\n  AlertDialogDescriptionElement,\n  AlertDialogDescriptionProps\n>((props: ScopedProps<AlertDialogDescriptionProps>, forwardedRef) => {\n  const { __scopeAlertDialog, ...descriptionProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Description {...dialogScope} {...descriptionProps} ref={forwardedRef} />;\n});\n\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'AlertDialogAction';\n\ntype AlertDialogActionElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ntype DialogCloseProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogActionProps extends DialogCloseProps {}\n\nconst AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(\n  (props: ScopedProps<AlertDialogActionProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...actionProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Close {...dialogScope} {...actionProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogCancelProps extends DialogCloseProps {}\n\nconst AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(\n  (props: ScopedProps<AlertDialogCancelProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...cancelProps } = props;\n    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const ref = useComposedRefs(forwardedRef, cancelRef);\n    return <DialogPrimitive.Close {...dialogScope} {...cancelProps} ref={ref} />;\n  }\n);\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<AlertDialogContentElement | null>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Portal = AlertDialogPortal;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}