{"ast":null,"code":"const FORMS_STORAGE_KEY='dynamicFormBuilder_forms';export const saveForm=form=>{try{const existingForms=getSavedForms();const updatedForms=[...existingForms.filter(f=>f.id!==form.id),form];localStorage.setItem(FORMS_STORAGE_KEY,JSON.stringify(updatedForms));}catch(error){console.error('Error saving form:',error);}};export const getSavedForms=()=>{try{const formsJson=localStorage.getItem(FORMS_STORAGE_KEY);return formsJson?JSON.parse(formsJson):[];}catch(error){console.error('Error loading forms:',error);return[];}};export const getFormById=id=>{const forms=getSavedForms();return forms.find(form=>form.id===id)||null;};export const deleteForm=id=>{try{const forms=getSavedForms();const updatedForms=forms.filter(form=>form.id!==id);localStorage.setItem(FORMS_STORAGE_KEY,JSON.stringify(updatedForms));}catch(error){console.error('Error deleting form:',error);}};","map":{"version":3,"names":["FORMS_STORAGE_KEY","saveForm","form","existingForms","getSavedForms","updatedForms","filter","f","id","localStorage","setItem","JSON","stringify","error","console","formsJson","getItem","parse","getFormById","forms","find","deleteForm"],"sources":["C:/Dynamic Form Builder Application/src/utils/localStorage.ts"],"sourcesContent":["import { FormSchema } from '../types/form.ts';\n\nconst FORMS_STORAGE_KEY = 'dynamicFormBuilder_forms';\n\nexport const saveForm = (form: FormSchema): void => {\n  try {\n    const existingForms = getSavedForms();\n    const updatedForms = [...existingForms.filter(f => f.id !== form.id), form];\n    localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(updatedForms));\n  } catch (error) {\n    console.error('Error saving form:', error);\n  }\n};\n\nexport const getSavedForms = (): FormSchema[] => {\n  try {\n    const formsJson = localStorage.getItem(FORMS_STORAGE_KEY);\n    return formsJson ? JSON.parse(formsJson) : [];\n  } catch (error) {\n    console.error('Error loading forms:', error);\n    return [];\n  }\n};\n\nexport const getFormById = (id: string): FormSchema | null => {\n  const forms = getSavedForms();\n  return forms.find(form => form.id === id) || null;\n};\n\nexport const deleteForm = (id: string): void => {\n  try {\n    const forms = getSavedForms();\n    const updatedForms = forms.filter(form => form.id !== id);\n    localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(updatedForms));\n  } catch (error) {\n    console.error('Error deleting form:', error);\n  }\n};"],"mappings":"AAEA,KAAM,CAAAA,iBAAiB,CAAG,0BAA0B,CAEpD,MAAO,MAAM,CAAAC,QAAQ,CAAIC,IAAgB,EAAW,CAClD,GAAI,CACF,KAAM,CAAAC,aAAa,CAAGC,aAAa,CAAC,CAAC,CACrC,KAAM,CAAAC,YAAY,CAAG,CAAC,GAAGF,aAAa,CAACG,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKN,IAAI,CAACM,EAAE,CAAC,CAAEN,IAAI,CAAC,CAC3EO,YAAY,CAACC,OAAO,CAACV,iBAAiB,CAAEW,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC,CACvE,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC5C,CACF,CAAC,CAED,MAAO,MAAM,CAAAT,aAAa,CAAGA,CAAA,GAAoB,CAC/C,GAAI,CACF,KAAM,CAAAW,SAAS,CAAGN,YAAY,CAACO,OAAO,CAAChB,iBAAiB,CAAC,CACzD,MAAO,CAAAe,SAAS,CAAGJ,IAAI,CAACM,KAAK,CAACF,SAAS,CAAC,CAAG,EAAE,CAC/C,CAAE,MAAOF,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,EAAE,CACX,CACF,CAAC,CAED,MAAO,MAAM,CAAAK,WAAW,CAAIV,EAAU,EAAwB,CAC5D,KAAM,CAAAW,KAAK,CAAGf,aAAa,CAAC,CAAC,CAC7B,MAAO,CAAAe,KAAK,CAACC,IAAI,CAAClB,IAAI,EAAIA,IAAI,CAACM,EAAE,GAAKA,EAAE,CAAC,EAAI,IAAI,CACnD,CAAC,CAED,MAAO,MAAM,CAAAa,UAAU,CAAIb,EAAU,EAAW,CAC9C,GAAI,CACF,KAAM,CAAAW,KAAK,CAAGf,aAAa,CAAC,CAAC,CAC7B,KAAM,CAAAC,YAAY,CAAGc,KAAK,CAACb,MAAM,CAACJ,IAAI,EAAIA,IAAI,CAACM,EAAE,GAAKA,EAAE,CAAC,CACzDC,YAAY,CAACC,OAAO,CAACV,iBAAiB,CAAEW,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC,CACvE,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}