{"ast":null,"code":"export const validateField = (value, rules) => {\n  const errors = [];\n  for (const rule of rules) {\n    switch (rule.type) {\n      case 'required':\n        if (!value || typeof value === 'string' && value.trim() === '') {\n          errors.push(rule.message);\n        }\n        break;\n      case 'minLength':\n        if (value && typeof value === 'string' && value.length < rule.value) {\n          errors.push(rule.message);\n        }\n        break;\n      case 'maxLength':\n        if (value && typeof value === 'string' && value.length > rule.value) {\n          errors.push(rule.message);\n        }\n        break;\n      case 'email':\n        if (value && typeof value === 'string') {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(value)) {\n            errors.push(rule.message);\n          }\n        }\n        break;\n      case 'password':\n        if (value && typeof value === 'string') {\n          if (value.length < 8 || !/\\d/.test(value)) {\n            errors.push(rule.message);\n          }\n        }\n        break;\n    }\n  }\n  return errors;\n};\nexport const calculateDerivedValue = (formula, formData) => {\n  try {\n    // Simple formula evaluation - in production, you'd want a more robust solution\n    // For age calculation from date of birth\n    if (formula.includes('new Date().getFullYear() - new Date(') && formula.includes(').getFullYear()')) {\n      var _formula$match;\n      const fieldName = (_formula$match = formula.match(/new Date\\((\\w+)\\)/)) === null || _formula$match === void 0 ? void 0 : _formula$match[1];\n      if (fieldName && formData[fieldName]) {\n        const birthDate = new Date(formData[fieldName]);\n        const today = new Date();\n        let age = today.getFullYear() - birthDate.getFullYear();\n        const monthDiff = today.getMonth() - birthDate.getMonth();\n        if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n          age--;\n        }\n        return age;\n      }\n    }\n\n    // Simple arithmetic operations\n    let evaluatedFormula = formula;\n    Object.keys(formData).forEach(key => {\n      const value = formData[key];\n      if (typeof value === 'number') {\n        evaluatedFormula = evaluatedFormula.replace(new RegExp(key, 'g'), value.toString());\n      }\n    });\n\n    // Basic arithmetic evaluation (be careful with eval in production)\n    if (/^[\\d\\s+\\-*/().]+$/.test(evaluatedFormula)) {\n      return eval(evaluatedFormula);\n    }\n    return '';\n  } catch (error) {\n    console.error('Error calculating derived value:', error);\n    return '';\n  }\n};","map":{"version":3,"names":["validateField","value","rules","errors","rule","type","trim","push","message","length","emailRegex","test","calculateDerivedValue","formula","formData","includes","_formula$match","fieldName","match","birthDate","Date","today","age","getFullYear","monthDiff","getMonth","getDate","evaluatedFormula","Object","keys","forEach","key","replace","RegExp","toString","eval","error","console"],"sources":["C:/Dynamic Form Builder Application/src/utils/validation.ts"],"sourcesContent":["import { ValidationRule } from '../types/form.ts';\n\nexport const validateField = (value: any, rules: ValidationRule[]): string[] => {\n  const errors: string[] = [];\n\n  for (const rule of rules) {\n    switch (rule.type) {\n      case 'required':\n        if (!value || (typeof value === 'string' && value.trim() === '')) {\n          errors.push(rule.message);\n        }\n        break;\n      \n      case 'minLength':\n        if (value && typeof value === 'string' && value.length < (rule.value as number)) {\n          errors.push(rule.message);\n        }\n        break;\n      \n      case 'maxLength':\n        if (value && typeof value === 'string' && value.length > (rule.value as number)) {\n          errors.push(rule.message);\n        }\n        break;\n      \n      case 'email':\n        if (value && typeof value === 'string') {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(value)) {\n            errors.push(rule.message);\n          }\n        }\n        break;\n      \n      case 'password':\n        if (value && typeof value === 'string') {\n          if (value.length < 8 || !/\\d/.test(value)) {\n            errors.push(rule.message);\n          }\n        }\n        break;\n    }\n  }\n\n  return errors;\n};\n\nexport const calculateDerivedValue = (formula: string, formData: Record<string, any>): any => {\n  try {\n    // Simple formula evaluation - in production, you'd want a more robust solution\n    // For age calculation from date of birth\n    if (formula.includes('new Date().getFullYear() - new Date(') && formula.includes(').getFullYear()')) {\n      const fieldName = formula.match(/new Date\\((\\w+)\\)/)?.[1];\n      if (fieldName && formData[fieldName]) {\n        const birthDate = new Date(formData[fieldName]);\n        const today = new Date();\n        let age = today.getFullYear() - birthDate.getFullYear();\n        const monthDiff = today.getMonth() - birthDate.getMonth();\n        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n          age--;\n        }\n        return age;\n      }\n    }\n    \n    // Simple arithmetic operations\n    let evaluatedFormula = formula;\n    Object.keys(formData).forEach(key => {\n      const value = formData[key];\n      if (typeof value === 'number') {\n        evaluatedFormula = evaluatedFormula.replace(new RegExp(key, 'g'), value.toString());\n      }\n    });\n    \n    // Basic arithmetic evaluation (be careful with eval in production)\n    if (/^[\\d\\s+\\-*/().]+$/.test(evaluatedFormula)) {\n      return eval(evaluatedFormula);\n    }\n    \n    return '';\n  } catch (error) {\n    console.error('Error calculating derived value:', error);\n    return '';\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}